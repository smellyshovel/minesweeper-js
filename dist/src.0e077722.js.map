{"version":3,"sources":["cell.js","field.js","minesweeper.js","index.js"],"names":["Cell","field","x","y","_image","Images","closed","isMined","value","isClosed","isFlagged","isDoubted","context","drawImage","bounds","left","top","size","game","isStarted","mineCells","neighbours","dispatch","openCell","cell","isRecursive","isOpened","image","forEach","neighbour","force","tempImage","open","flag","filter","length","draw","theme","val","currentImage","offsetX","canvas","width","props","offsetY","height","right","bottom","Math","min","Field","getContext","initCells","eventListeners","Map","registerEventListeners","cells","Array","from","c","i","xs","ys","includes","except","cellsToFill","minedCells","mines","random","push","find","isPaused","fillStyle","fillRect","textBaseline","textAlign","font","fillText","addEventListener","event","preventDefault","ignoreNextUp","lastCell","set","target","locateCell","buttons","leftDown","middleDown","button","leftUp","rightUp","middleUp","key","removeEventListener","clear","Minesweeper","Error","on","won","closedCells","every","lost","openedCells","some","flaggedCells","unregisterEventListeners","isEnded","listener","params","call","Settings","defaultPresets","easy","medium","hard","difficulty","localStorage","getItem","setItem","customPreset","JSON","parse","stringify","customWidth","customHeight","customMines","difficultyInput","document","querySelector","widthInput","heightInput","minesInput","updateInputs","disabled","updateMines","max","timerOutput","timer","time","startTimer","setInterval","outputTime","stopTimer","clearInterval","minutes","seconds","innerHTML","pauseButton","name","ImageSources","img","Image","src","startNewGame","resultOutput","flagsOutput","result","classList","add","setTimeout","remove","resizeCanvas","getBoundingClientRect","confirm","destroy","resume","pause","window"],"mappings":"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","file":"src.0e077722.js","sourceRoot":"../src","sourcesContent":["export default class Cell {\n    constructor(field, x, y) {\n        this.field = field;\n\n        this.x = x;\n        this.y = y;\n\n        this._image = this.Images.closed;\n\n        this.isMined = false;\n        this.value = 0;\n\n        this.isClosed = true;\n        this.isFlagged = false;\n        this.isDoubted = false;\n    }\n\n    get Images() {\n        return this.field.theme;\n    }\n\n    set image(val) {\n        this._image = this.Images[`${ val }`];\n        this.draw();\n    }\n\n    set tempImage(val) {\n        let currentImage = this._image;\n        this.image = val;\n        this._image = currentImage;\n    }\n\n    get bounds() {\n        let offsetX = (this.field.canvas.width - this.field.props.width * this.size) / 2;\n        let offsetY = (this.field.canvas.height - this.field.props.height * this.size) / 2;\n\n        return {\n            left: this.x * this.size + offsetX,\n            right: this.x * this.size + this.size + offsetX,\n            top: this.y * this.size + offsetY,\n            bottom: this.y * this.size + this.size + offsetY\n        };\n    }\n\n    get size() {\n        return Math.min(\n            this.field.canvas.width / this.field.props.width,\n            this.field.canvas.height / this.field.props.height\n        );\n    }\n\n    get isOpened() {\n        return !this.isClosed;\n    }\n\n    draw() {\n        this.field.context.drawImage(\n            this._image,\n            this.bounds.left,\n            this.bounds.top,\n            this.size,\n            this.size\n        );\n    }\n\n    open() {\n        if (!this.field.game.isStarted) {\n            this.field.mineCells([this, ...this.neighbours]);\n            this.field.game.dispatch(\"start\", this.field.game);\n        }\n\n        (function openCell(cell, isRecursive) {\n            if (cell.isOpened || cell.isFlagged || cell.isDoubted) return;\n\n            if (cell.isMined) {\n                cell.isClosed = false;\n            } else {\n                cell.image = `${ cell.value }`;\n                cell.isClosed = false;\n\n                if (cell.value === 0) {\n                    cell.neighbours.forEach(neighbour => openCell(neighbour, true));\n                }\n            }\n\n            if (!isRecursive) {\n                cell.field.game.dispatch(\"cellopen\", cell);\n            }\n        })(this);\n    }\n\n    flag(force) {\n        if (this.isClosed) {\n            if (!this.isFlagged && !this.isDoubted) { // closed but not flagged nor doubted\n                this.isFlagged = true;\n                this.image = \"flag\";\n            } else if (this.isFlagged) { // already flagged\n                this.isFlagged = false;\n                this.isDoubted = true;\n                this.image = \"doubt\";\n            } else if (this.isDoubted) { // already doubted\n                this.isDoubted = false;\n                this.image = \"closed\";\n            }\n        }\n\n        if (force) {\n            this.isDoubted = false;\n            this.isFlagged = true;\n            this.image = \"flag\";\n        }\n\n        this.field.game.dispatch(\"cellflag\", this);\n    }\n\n    leftDown() {\n        if (this.isClosed && !this.isFlagged && !this.isDoubted) {\n            this.tempImage = \"0\";\n        }\n    }\n\n    leftUp() {\n        if (this.isClosed && !this.isFlagged && !this.isDoubted) {\n            this.open();\n        }\n    }\n\n    rightUp() {\n        this.flag();\n    }\n\n    middleDown() {\n        this.neighbours.forEach(neighbour => {\n            if (neighbour.isClosed && !neighbour.isFlagged && !neighbour.isDoubted) {\n                neighbour.tempImage = \"0\";\n            }\n        });\n    }\n\n    middleUp() {\n        if (this.isOpened && this.value) {\n            let flaggedNeighbours = this.neighbours.filter(neighbour => neighbour.isFlagged);\n\n            if (flaggedNeighbours.length === this.value) {\n                this.neighbours.forEach(neighbour => neighbour.open());\n            }\n        }\n\n        this.field.draw();\n    }\n}\n","import Cell from \"./cell\";\n\nexport default class Field {\n    constructor({ game, canvas, theme, ...props }) {\n        this.game = game;\n\n        this.canvas = canvas;\n        this.context = canvas.getContext(\"2d\");\n\n        this.theme = theme;\n\n        this.props = props;\n\n        this.initCells();\n\n        this.eventListeners = new Map();\n        this.registerEventListeners();\n\n        this.draw();\n    }\n\n    get closedCells() {\n        return this.cells.filter(cell => cell.isClosed);\n    }\n\n    get openedCells() {\n        return this.cells.filter(cell => cell.isOpened);\n    }\n\n    get flaggedCells() {\n        return this.cells.filter(cell => cell.isFlagged);\n    }\n\n    initCells() {\n        this.cells = Array.from(new Array(this.props.width * this.props.height), (c, i) => {\n            let x = i % this.props.width;\n            let y = (i - x) / this.props.width;\n\n            return new Cell(this, x, y);\n        });\n\n        this.cells.forEach(cell => {\n            cell.neighbours = this.cells.filter(neighbour => {\n                let xs = [cell.x - 1, cell.x, cell.x + 1];\n                let ys = [cell.y - 1, cell.y, cell.y + 1];\n\n                return xs.includes(neighbour.x)\n                    && ys.includes(neighbour.y)\n                    && cell !== neighbour;\n            });\n        });\n    }\n\n    mineCells(except) {\n        let cellsToFill = this.cells.filter(cell => !except.includes(cell));\n        this.minedCells = [];\n\n        while (this.minedCells.length < this.props.mines) {\n            let cell = cellsToFill[Math.random() * cellsToFill.length | 0];\n\n            if (!cell.isMined) {\n                cell.isMined = true;\n                this.minedCells.push(cell);\n            }\n        }\n\n        this.minedCells.forEach(cell => {\n            cell.neighbours.forEach(neighbour => neighbour.value += 1);\n        });\n    }\n\n    locateCell(offsetX, offsetY) {\n        return this.cells.find(cell => {\n            return cell.bounds.left <= offsetX\n                && cell.bounds.right >= offsetX\n                && cell.bounds.top <= offsetY\n                && cell.bounds.bottom >= offsetY;\n        });\n    }\n\n    draw() {\n        if (this.game.isPaused) {\n            this.context.fillStyle = \"#f2f2f2\";\n            this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n            this.context.textBaseline = 'middle';\n            this.context.textAlign = \"center\";\n            this.context.font = `2em Helvetica`;\n            this.context.fillStyle = \"#828282\";\n            this.context.fillText(\"The game is paused.\", this.canvas.width / 2, this.canvas.height / 2);\n        } else {\n            this.context.fillStyle = \"#fff\";\n            this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n            this.cells.forEach(cell => cell.draw());\n        }\n    }\n\n    registerEventListeners() {\n        // no need to ever unregister it\n        this.canvas.addEventListener(\"contextmenu\", (event) => {\n            event.preventDefault();\n        });\n\n        let ignoreNextUp = false;\n\n        this.eventListeners.set(\n            {\n                event: \"mousedown\",\n                target: this.canvas\n            },\n\n            (event) => {\n                // force draw to insure the latest state is visible\n                this.draw();\n\n                let cell = this.locateCell(event.offsetX, event.offsetY);\n                if (!cell) return;\n\n                if (event.buttons === 1) { // left button\n                    cell.leftDown();\n                } else if (event.buttons > 2 && event.buttons < 8) { // middle or both left and right buttons\n                    cell.middleDown();\n                }\n\n                ignoreNextUp = false;\n            }\n        );\n\n        // the last mousemove'd cell\n        let lastCell;\n\n        this.eventListeners.set(\n            {\n                event: \"mousemove\",\n                target: this.canvas\n            },\n\n            (event) => {\n                let cell = this.locateCell(event.offsetX, event.offsetY);\n                if (!cell) return;\n\n                if (lastCell !== cell) {\n                    // force draw to insure the latest state is visible\n                    this.draw();\n\n                    if (event.buttons === 1) { // left button\n                        cell.leftDown();\n                    } else if (event.buttons > 2 && event.buttons < 8) { // middle or both left and right buttons\n                        cell.middleDown();\n                    }\n\n                    lastCell = cell;\n                }\n            }\n        );\n\n        this.eventListeners.set(\n            {\n                event: \"mouseleave\",\n                target: this.canvas\n            },\n\n            (event) => {\n                this.draw();\n                ignoreNextUp = false;\n            }\n        );\n\n        this.eventListeners.set(\n            {\n                event: \"mouseup\",\n                target: this.canvas\n            },\n\n            (event) => {\n                let cell = this.locateCell(event.offsetX, event.offsetY);\n                if (!cell) return;\n\n                if (event.buttons === 0) { // no more buttons are down\n                    if (event.button === 0) { // left button\n                        if (!ignoreNextUp) cell.leftUp();\n                    } else if (event.button === 2) { // right button\n                        if (!ignoreNextUp) cell.rightUp();\n                    } else if (event.button === 1) { // middle button\n                        cell.middleUp();\n                        ignoreNextUp = true;\n                    }\n                } else if (event.buttons > 0 && event.buttons < 8) { // either left or right button is still down\n                    cell.middleUp();\n                    ignoreNextUp = true;\n                }\n            }\n        );\n\n        this.eventListeners.forEach((val, key) => {\n            key.target.addEventListener(key.event, val);\n        });\n    }\n\n    unregisterEventListeners() {\n        this.eventListeners.forEach((val, key) => {\n            key.target.removeEventListener(key.event, val);\n        });\n\n        this.eventListeners.clear();\n    }\n}\n","import Field from \"./field\";\n\nexport default class Minesweeper {\n    constructor({\n        canvas, // a <canvas> DOM element,\n        theme, // a set of images\n        width = 9, // number of cells by the X axis\n        height = 9, // number of cells by the Y axis\n        mines = 10 // number of mines on the field\n    }) {\n        if (width < 5 || width > 50 || height < 5 || height > 50) {\n            throw new Error(`Incorrect field size. The field must be from 5×5 to 50×50 cells large, but ${ width }×${ height } is provided`);\n        }\n\n        if (mines < 1 || mines > width * height - 10) {\n            throw new Error(`Incorrect number of mines. For the ${ width }×${ height } field it must be between 1 and ${ width * height - 10 }, but ${ mines } is provided`);\n        }\n\n        // all the event listeners registered using `.on()` are stored here\n        this.eventListeners = {};\n\n        this.field = new Field({\n            game: this,\n            canvas,\n            theme,\n            width,\n            height,\n            mines\n        });\n\n        this\n        .on(\"start\", () => {\n            this.isStarted = true;\n        })\n        .on(\"cellopen\", (cell) => {\n            let won = this.field.closedCells.every(cell => cell.isMined);\n            let lost = this.field.openedCells.some(cell => cell.isMined);\n\n            if (won) {\n                this.field.minedCells.forEach(cell => cell.flag(true));\n                this.dispatch(\"end\", \"won\");\n            } else if (lost) {\n                this.field.minedCells.forEach(cell => {\n                    if (!cell.isFlagged) cell.image = \"mine\";\n                });\n\n                this.field.flaggedCells.forEach(cell => {\n                    if (!cell.isMined) cell.image = \"cross\";\n                });\n\n                cell.image = \"trigger\";\n                this.dispatch(\"end\", \"lost\");\n            }\n        })\n        .on(\"pause\", () => {\n            this.isPaused = true;\n            this.field.draw();\n            this.field.unregisterEventListeners();\n        })\n        .on(\"resume\", () => {\n            this.isPaused = false;\n            this.field.draw();\n            this.field.registerEventListeners();\n        })\n        .on(\"end\", () => {\n            this.isEnded = true;\n            this.field.unregisterEventListeners();\n        });\n    }\n\n    pause() {\n        this.dispatch(\"pause\");\n    }\n\n    resume() {\n        this.dispatch(\"resume\");\n    }\n\n    on(event, listener) {\n        if (!this.eventListeners[event]) this.eventListeners[event] = [];\n        this.eventListeners[event].push(listener);\n\n        return this;\n    }\n\n    dispatch(event, ...params) {\n        (this.eventListeners[event] || []).forEach(listener => {\n            if (typeof listener === \"function\") {\n                listener.call(this, ...params);\n            }\n        });\n    }\n\n    destroy() {\n        this.dispatch(\"end\");\n        return null;\n    }\n}\n","const Settings = {\n    get defaultPresets() {\n        return {\n            easy: {\n                width: 9,\n                height: 9,\n                mines: 10\n            },\n\n            medium: {\n                width: 16,\n                height: 16,\n                mines: 40\n            },\n\n            hard: {\n                width: 30,\n                height: 16,\n                mines: 99\n            }\n        };\n    },\n\n    get difficulty() {\n        return localStorage.getItem(\"difficulty\");\n    },\n\n    set difficulty(val) {\n        localStorage.setItem(\"difficulty\", val);\n    },\n\n    get customPreset() {\n        return JSON.parse(localStorage.getItem(\"customPreset\"));\n    },\n\n    set customPreset(val) {\n        localStorage.setItem(\"customPreset\", JSON.stringify(val));\n    },\n\n    set customWidth(val) {\n        let customPreset = this.customPreset;\n        customPreset.width = val;\n        this.customPreset = customPreset;\n    },\n\n    set customHeight(val) {\n        let customPreset = this.customPreset;\n        customPreset.height = val;\n        this.customPreset = customPreset;\n    },\n\n    set customMines(val) {\n        let customPreset = this.customPreset;\n        customPreset.mines = val;\n        this.customPreset = customPreset;\n    },\n\n    get width() {\n        if (this.difficulty !== \"custom\") {\n            return +this.defaultPresets[this.difficulty].width;\n        } else {\n            return +this.customPreset.width;\n        }\n    },\n\n    get height() {\n        if (this.difficulty !== \"custom\") {\n            return +this.defaultPresets[this.difficulty].height;\n        } else {\n            return +this.customPreset.height;\n        }\n    },\n\n    get mines() {\n        if (this.difficulty !== \"custom\") {\n            return +this.defaultPresets[this.difficulty].mines;\n        } else {\n            return +this.customPreset.mines;\n        }\n    }\n}\n\nif (!Settings.difficulty) {\n    Settings.difficulty = \"medium\";\n}\n\nif (!Settings.customPreset) {\n    Settings.customPreset = {\n        width: 20,\n        height: 20,\n        mines: 20\n    }\n}\n\nlet difficultyInput = document.querySelector(\"#difficulty\");\nlet widthInput = document.querySelector(\"#width\");\nlet heightInput = document.querySelector(\"#height\");\nlet minesInput = document.querySelector(\"#mines\");\n\ndifficultyInput.value = Settings.difficulty;\n\nfunction updateInputs() {\n    widthInput.value = Settings.width;\n    heightInput.value = Settings.height;\n    minesInput.value = Settings.mines;\n\n    if (Settings.difficulty !== \"custom\") {\n        widthInput.disabled = true;\n        heightInput.disabled = true;\n        minesInput.disabled = true;\n    } else {\n        widthInput.disabled = false;\n        heightInput.disabled = false;\n        minesInput.disabled = false;\n    }\n}\n\nupdateInputs();\n\nfunction updateMines() {\n    minesInput.max = Settings.width * Settings.height - 10;\n\n    if (+minesInput.value > +minesInput.max) {\n        minesInput.value = minesInput.max;\n    }\n\n    Settings.customMines = minesInput.value;\n}\n\nupdateMines();\n\ndifficultyInput.addEventListener(\"change\", function() {\n    Settings.difficulty = this.value;\n    updateInputs();\n});\n\nwidthInput.addEventListener(\"change\", function() {\n    Settings.customWidth = this.value;\n    updateMines();\n});\n\nheightInput.addEventListener(\"change\", function() {\n    Settings.customHeight = this.value;\n    updateMines();\n});\n\nminesInput.addEventListener(\"change\", function() {\n    updateMines();\n});\n\nimport Minesweeper from \"./minesweeper\";\n\nlet timerOutput = document.querySelector(\"#timer\");\ntimerOutput.value = \"00:00\";\n\nlet timer, time = 0;\n\nfunction startTimer() {\n    timer = setInterval(function() {\n        time += 1;\n        outputTime();\n        // clock =\n    }, 1000);\n}\n\nfunction stopTimer(clear) {\n    clearInterval(timer);\n    if (clear) time = 0, outputTime();\n}\n\nfunction outputTime() {\n    let minutes = time / 60 | 0;\n    let seconds = time % 60;\n\n    timerOutput.innerHTML = `${ minutes < 10 ? `${ \"0\" + minutes }` : minutes }:${ seconds < 10 ? `${ \"0\" + seconds }` : seconds }`;\n}\n\nlet pauseButton = document.querySelector(\"#pause\");\n\nimport ImageSources from \"./assets/cells/*.svg\";\nconst Images = {};\n\nfor (let name in ImageSources) {\n    let img = new Image();\n    img.src = ImageSources[name];\n\n    Images[name] = img;\n}\n\nlet game = startNewGame();\n\nfunction startNewGame() {\n    let game = new Minesweeper({\n        canvas: document.querySelector(\"#minesweeper\"),\n        theme: {\n            ...Images\n        },\n        width: Settings.width,\n        height: Settings.height,\n        mines: Settings.mines\n    });\n\n    let resultOutput = document.querySelector(\"#result\");\n    resultOutput.value = \"\";\n\n    let flagsOutput = document.querySelector(\"#flags\");\n    flagsOutput.value = `0 / ${ Settings.mines }`;\n\n    game\n    .on(\"start\", function() {\n        startTimer();\n        pauseButton.disabled = false;\n    })\n    .on(\"pause\", function() {\n        stopTimer();\n        pauseButton.innerHTML = \"Resume\";\n    })\n    .on(\"resume\", function() {\n        startTimer();\n        pauseButton.innerHTML = \"Pause\";\n    })\n    .on(\"cellflag\", function() {\n        flagsOutput.value = `${ game.field.flaggedCells.length } / ${ Settings.mines }`;\n    })\n    .on(\"end\", function(result) {\n        if (result === \"won\") {\n            resultOutput.value = \"You won! Congratulations!\";\n            resultOutput.classList.add(\"visible\");\n        } else if (result === \"lost\") {\n            resultOutput.value = \"You lost :(\";\n            resultOutput.classList.add(\"visible\");\n        }\n\n        setTimeout(() => {\n            resultOutput.classList.remove(\"visible\");\n        }, 2000);\n\n        pauseButton.disabled = true;\n\n        stopTimer();\n    });\n\n    return game;\n};\n\ndocument.querySelector(\"#start\").addEventListener(\"click\", function() {\n    if (game.isStarted && !game.isEnded && !confirm(\"Are you sure?\")) return;\n\n    game = game.destroy();\n    game = startNewGame();\n\n    stopTimer(true);\n});\n\npauseButton.addEventListener(\"click\", function() {\n    if (game.isPaused) {\n        game.resume();\n    } else {\n        game.pause();\n    }\n});\n\nfunction resizeCanvas() {\n    let canvas = document.querySelector(\"#minesweeper\");\n    canvas.width = canvas.getBoundingClientRect().width;\n    canvas.height = canvas.getBoundingClientRect().height;\n    game.field.draw();\n}\n\nresizeCanvas();\n\nwindow.addEventListener(\"resize\", function(event) {\n    resizeCanvas();\n});\n"]}